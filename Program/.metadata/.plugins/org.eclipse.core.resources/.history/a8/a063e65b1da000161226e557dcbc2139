import java.util.Scanner;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.*;
import static java.nio.file.FileVisitResult.*;
import java.util.stream.Stream;

public class ComputeTardiness {	
	public static ProblemInstance readInstance(String filename){
		ProblemInstance instance = null;
		
		try {
			int numJobs = 0;
			int[][] jobs = null;
			
			Scanner sc = new Scanner(new BufferedReader(new FileReader(filename)));
			if(sc.hasNextInt()){
				numJobs = sc.nextInt();
				jobs = new int[numJobs][2];
				int nextJobID = 0;
			
				while (sc.hasNextInt() && nextJobID < numJobs) {
					jobs[nextJobID][0] = sc.nextInt();
					jobs[nextJobID][1] = sc.nextInt();
					nextJobID++;
				}
			}
			sc.close();
			
			instance = new ProblemInstance(numJobs, jobs);
		} catch(FileNotFoundException e) {
			e.printStackTrace();
		}
		
		return instance;
	}

	
	
	// reads a problem, and outputs the result of both greedy and best-first
    public static void main (String args[]) throws IOException {
    	
//    	Path p = Paths.get("/Users/ludai/Desktop/Github/Advanced_Algorithms/Program/Program1/src/instances");
//    	String file = p.getFileName().toString();
//    	System.out.println(file);
    	
    	try(Stream<Path> paths = Files.walk(Paths.get("/Users/ludai/Desktop/Github/Advanced_Algorithms/Program/Program1/src/instances"))) {
//    	    System.out.println(paths.length());
    		paths.forEach(filePath -> {
    	        if (Files.isRegularFile(filePath)) {
    	            System.out.println(filePath);
    	        }
    	    });
    	} 
    
    	
    	/*
		ProblemInstance instance = readInstance("/Users/ludai/Desktop/Github/Advanced_Algorithms/Program/Program1/src/instances/random_RDD=0.2_TF=0.2_#5.dat");
		
		Greedy greedy = new Greedy(instance);
		Schedule greedySchedule = greedy.getSchedule();
		System.out.println(greedySchedule.getTardiness());
		
		BestFirst bestFirst = new BestFirst(instance);
		Schedule bestFirstSchedule = bestFirst.getSchedule();
		System.out.println(bestFirstSchedule.getTardiness());
		*/
	}
}
